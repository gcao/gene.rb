# tt lib/gene.tt -o /tmp/gene.rb -f

module Gene
  grammar Grammar
    rule item
      v:(gene / array / hash / literal / entity) {
        def resolve
          $logger.debug 'item'
          v.resolve
        end
      }
    end

    rule gene
      '(' spaces? first:item? rest:(spaces item)* spaces? ')' {
        def resolve
          $logger.debug 'gene'
          group = Group.new
          if first.elements && first.elements.size > 0
            group << first.elements.first.resolve
          end
          rest.elements.each do |el|
            group << el.elements.last.resolve
          end
          group
        end
      }
    end

    rule array
      '[' spaces? first:item? rest:(spaces item)* spaces? ']' {
        def resolve
          $logger.debug 'array'
          array = []
          if first.elements && first.elements.size > 0
            array << first.elements.first.resolve
          end
          rest.elements.each do |el|
            array << el.elements.last.resolve
          end
          array
        end
      }
    end

    rule hash
      '{' spaces? first:pair? rest:(spaces pair)* spaces? '}' {
        def resolve
          $logger.debug 'hash'
          pairs = Pairs.new
          if first.elements && first.elements.size > 0
            pairs << first.resolve
          end
          rest.elements.each do |el|
            pairs << el.elements.last.resolve
          end
          pairs
        end
      }
    end

    rule pair
      key:item spaces ':' spaces value:item {
        def resolve
          $logger.debug 'pair'
          Pair.new(key.resolve, value.resolve)
        end
      }
    end

    rule entity
      [^\s(){}\[\]]+ {
        def resolve
          $logger.debug 'entity'
          Entity.new text_value
        end
      }
    end

    rule literal
      v:(boolean / null / number / string) {
        def resolve
          $logger.debug 'literal'
          v.resolve
        end
      }
    end

    rule array_id
      '$' {
        def resolve
          $logger.debug 'array_id'
        end
      }
    end

    rule shortcut
      '::' {
        def resolve
          $logger.debug 'entity'
        end
      }
    end

    rule join
      '$$' {
        def resolve
          $logger.debug 'join'
        end
      }
    end

    rule string
      '"' s:[^"]* '"' {
        def resolve
          $logger.debug 'string'
          s.text_value
        end
      }
    end

    rule single_quoted_string
      "'" s:[^']* "'" {
        def resolve
          $logger.debug 'single_line_comment'
          s.text_value
        end
      }
    end

    rule number
      '-'? ([0-9]+ '.')? [0-9]+ {
        def resolve
          $logger.debug 'number'
          if text_value.index '.'
            text_value.to_f
          else
            text_value.to_i
          end
        end
      }
    end

    rule boolean
      ("true" / "false") {
        def resolve
          $logger.debug 'boolean'
          text_value == 'true'
        end
      }
    end

    rule null
      "null" {
        def resolve
          $logger.debug 'null'
        end
      }
    end

    rule single_line_comment
      ("#" [^\n]* "\n") {
        def resolve
          $logger.debug 'single_line_comment'
        end
      }
    end

    rule group_comment
      ('(##' item* ')' / '[##' item* ']' / '{##' item* '}') {
        def resolve
          $logger.debug 'group_comment'
        end
      }
    end

    rule spaces
      [ \t\r\n]* {
        def resolve
          $logger.debug 'spaces'
        end
      }
    end
  end
end


module Gene
  grammar Grammar
    rule document
      expr {
        def content
          Gene.logger.trace 'document.content'
          Gene.logger.trace elements.inspect
          expr.content
        end
      }
    end

    rule expr
      (comp_expr / array / atom) {
        def content
          Gene.logger.trace 'expr.content'
          Gene.logger.trace elements.inspect
          elements[0].content
        end
      }
    end

    rule comp_expr
      '(' expr+ ')'
    end

    rule array
      ('[' [ ]* (expr)* [ ]* ']') {
        def content
          Gene.logger.trace 'array.content'
          Gene.logger.trace elements.inspect
          if elements.size > 2
            elements[1..elements.size - 2].map{ |e| e.content }
          else
            []
          end
        end
      }
    end

    rule atom
      (id / string) {
        def content
          Gene.logger.trace 'atom.content'
          Gene.logger.trace elements.inspect
          elements[0].content
        end
      }
    end

    rule id
      ([^ '"]+) {
        def content
          Gene::Type::Ident.new(text_value)
        end
      }
    end

    rule string
      (('"' [^"]* '"') / ("'" [^']* "'")) {
        def content
          text_value
        end
      }
    end
  end
end


(class Object
  (method get prop-name
    ((@ prop-name))
  )

  (method set [prop-name value]
    ((@ prop-name) = value)
  )

  (method call [name args...]
    ($invoke self name args...)
  )

  (method class _
    ($invoke self 'instance_variable_get' '@klass')
  )

  (method is klass
    ((.class) .is_sub_class klass)
  )
)

(class Class
  (method parent_classes _
    (if ((@parent_classes .size) == 0)
      (if (self == Object)
        []
        [Object]
      )
      @parent_classes
    )
  )

  # check whether I am klass or an ancestor of klass
  (method is_sub_class klass
    # (open-repl)
    (if (self == klass)
      true
      ((.parent_classes) .any (fnx _klass (_klass .is_sub_class klass)))
    )
  )
)

# Wrapper class for native arrays
(class Array
  (method class _
    ($invoke $context "get" "Array")
  )
  (method size _
    ($invoke self "size")
  )
  (method get i
    (if (i < (.size))
      ($invoke self '[]' i)
    )
  )
  (method any f
    (for (def i 0) (i < (.size)) (i += 1)
      (def item (.get i))
      (if (f item i)
        (return true)
      )
    )
    false
  )
  (method each f
    (for (def i 0) (i < (.size)) (i += 1)
      (def item (.get i))
      (f item i)
    )
  )
  (method select f
    (def result [])
    (for (def i 0) (i < (.size)) (i += 1)
      (def item (.get i))
      # TODO:
    )
    result
  )
  (method flatten _
    (def result [])
    (.each
      (fnx item
        (if (($invoke ($invoke item 'class') 'name') == 'Array')
          (do
            (def child-array (item .flatten))
            (child-array .each
              (fnx item ($invoke result '<<' item))
            )
          )
          ($invoke result '<<' item)
        )
      )
    )
    result
  )
)

(class Hash
  (method size _
    ($invoke self "size")
  )
)

(class String
  (method + args...
    ($invoke $self '<<' args)
  )
)

(class File
)
(ns global/gene
  (class Object
  )

  (class File
    (fn read file
      ($file_read file)
    )

    (fn read_lines [file callback]
      ($file_read_lines file)
    )

    (fn write [file content]
      ($file_write file content)
    )
  )

  (class Dir
  )

  (class String
    (method length _
      ($invoke self 'length')
    )

    (method substr [start end]
      (if (! end) (end = ((.length) - start)))
      ($invoke self '[]' start end)
    )

    (method split sep
      ($invoke self 'split' sep)
    )

    (method to_i _
      ($invoke self 'to_i')
    )
  )

  (class Array
    (method length _
      ($invoke self 'length')
    )

    (method get i
      ($invoke self '[]' i)
    )

    (method each f
      (for (var i 0) (i < (.length)) (i += 1)
        (f (.get i))
      )
    )
  )

  (class Map
    (method size _
      ($invoke self 'size')
    )

    (method get key
      ($invoke self '[]' key)
    )

    (method each f
      (var keys ($invoke self 'keys'))
      (for (var i 0) (i < (.size)) (i += 1)
        (var key (keys .get i))
        (var val (.get key))
        (f key val)
      )
    )
  )

  (fn Env name
    ($env_get name)
  )

  (fn Env/member_resolver name
    ($env_get name)
  )

  # This will shadow access 'set' using Env/set
  #
  # To access environment variable named 'set', use (Env 'set')
  (fn Env/set [name value]
    ($env_set name value)
  )

  (ns net
    (class HttpServer
      # See https://practicingruby.com/articles/implementing-an-http-file-server

      (init port
        (@port = port)
        (@mappings = [])
      )

      (method serve_static [url path]
        (@mappings .push {^url url ^path path})
      )

      (method start _
        (var server ($invoke ($get_class "TCPServer") "new" "localhost" @port))
        (loop
          (var socket ($invoke server "accept"))
          (var req ($invoke socket "gets"))
          (var resp "Hello world!")
          ($invoke socket "print"
            (
              "HTTP/1.1 200 OK\r\n"
              "Content-Type: text/plain\r\n"
              "Content-Length: " ($invoke resp "bytesize") "\r\n"
              "Connection: close\r\n"
              "\r\n"
              resp
            )
          )
          ($invoke socket "close")
        )
      )
    )
  )
)

(ns global/ruby
  (fn member_resolver name
    ($get_ruby_class name)
  )
)

(var global/fs ($invoke ruby/Gene::Lang::Jit::FileSystemObject "new" ""))

undefined
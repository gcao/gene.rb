(class StringScanner
  ^^global

  (init source
    # TODO: create native StringScanner object
    (@target = ($invoke (get_native_class 'StringScanner') 'new' source))
  )

  (var klass self)

  # Use meta programming to define proxy methods
  (['eos?' 'skip'] .each
    (fnx name
      (with klass
        (method (do name) [args...]
          # `name` is not in scope!
          # ($invoke @target name args...)
        )
      )
    )
  )
)

(^^export var UNPARSED (new Object))

(class Parser extend StringScanner
  ^^global

  (method parse _
    (var result UNPARSED)
    (var value)

    (loop
      (if (.eos?)
        break
      )
      (if (.skip IGNORE)
        # continue
      else-if ((value = (.parse_string)) != UNPARSED)
        (result = (.handle_top_level_results result value))
      )
    )
  )
)
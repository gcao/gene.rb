(fn proxy name
  (method (do name) [args...]
    ^^inherit_scope    # to enable access to name
    ($invoke @target name args...)
  )
)

(class StringScanner
  ^^global

  (init source
    # create native StringScanner object
    (@target = ($invoke (get_native_class 'StringScanner') 'new' source))
  )

  # Use meta programming to define proxy methods
  (['eos?' 'skip' 'check' 'scan' 'peek'] .each (proxy .bind self))
)

# TODO: "this is a random_object" is required so it doesn't equal to other objects
(nsvar UNPARSED (new Object "this is a random_object"))

(nsvar SEPARATOR  #/[\s()\[\]{},;]/)
(nsvar SEP_OR_END (regexp "(?=" SEPARATOR "|$)"))
(nsvar IGNORE     #/\#($|[\n\r]|\s+[^\n\r]*($|[\n\r]))|[\s]/m)

(nsvar INTEGER    #/(-?0|-?[1-9]\d*)/ )
(nsvar FLOAT      #/((0|[1-9]\d*)(\.\d+([eE][+-]?\d+)|\.\d+|([eE][+-]?\d+)))/x )

# Keywords
(nsvar TRUE       (regexp 'true' SEP_OR_END))
(nsvar FALSE      (regexp 'false' SEP_OR_END))
(nsvar NULL       (regexp 'null' SEP_OR_END))
(nsvar UNDEFINED  (regexp 'undefined|void' SEP_OR_END))

(nsvar ESCAPE     #/\\/)
(nsvar PROPERTY   #/\^/)

(nsvar SYMBOL     #/([^"',\s\(\)\[\]\{\}][^,\s\(\)\[\]\{\}]*)/)
(nsvar STRING     #/"(([^"]|\\")*)"/)

(nsvar GENE_OPEN  #/\(/)
(nsvar GENE_CLOSE #/\)/)

(nsvar ARRAY_OPEN  #/\[/)
(nsvar ARRAY_CLOSE #/\]/)

(nsvar HASH_OPEN  #/\{/)
(nsvar HASH_CLOSE #/\}/)

(class Parser extend StringScanner
  ^^global

  (method parse _
    (var result UNPARSED)

    (var value)
    (var i 0)
    (loop
      # Prevent infinite loop
      (if (i < 100) (i += 1) else break)
      (if (.eos?) break)

      (if (.skip IGNORE)
        # continue
      else_if ((value = (.parse_float)) != UNPARSED)
        (result = (.handle_top_level_results result value))
      else_if ((value = (.parse_int)) != UNPARSED)
        (result = (.handle_top_level_results result value))
      else_if ((value = (.parse_keywords)) != UNPARSED)
        (result = (.handle_top_level_results result value))
      else_if ((value = (.parse_symbol)) != UNPARSED)
        (result = (.handle_top_level_results result value))
      else_if ((value = (.parse_string)) != UNPARSED)
        (result = (.handle_top_level_results result value))
      else_if ((value = (.parse_array)) != UNPARSED)
        (result = (.handle_top_level_results result value))
      else_if ((value = (.parse_gene)) != UNPARSED)
        (result = (.handle_top_level_results result value))
      else_if ((value = (.parse_hash)) != UNPARSED)
        (result = (.handle_top_level_results result value))
      )
    )

    (if (result == UNPARSED)
      ($invoke (get_native_class 'Gene::Types::Stream') 'new')
    else
      result
    )
  )

  (method handle_top_level_results [container new_result]
    (if (container == UNPARSED)
      new_result
    else_if (container .is Stream)
      (container .push new_result)
    else
      ($invoke (get_native_class 'Gene::Types::Stream') 'new' container new_result)
    )
  )

  (method parse_int _
    (if (.scan INTEGER)
      ($invoke ($invoke @target '[]' 1) 'to_i')
    else
      UNPARSED
    )
  )

  (method parse_float _
    (if (.scan FLOAT)
      ($invoke ($invoke @target '[]' 1) 'to_f')
    else
      UNPARSED
    )
  )

  (method parse_keywords _
    (if (.scan TRUE)
      true
    else_if (.scan FALSE)
      false
    else_if (.scan NULL)
      null
    else_if (.scan UNDEFINED)
      undefined
    else
      UNPARSED
    )
  )

  (method parse_string _
    (if (.scan STRING)
      ($invoke @target '[]' 1)
    else
      UNPARSED
    )
  )

  (method parse_symbol _
    (if (.check SYMBOL)
      (var value '')
      (loop
        (if (.eos?)
          break
        else_if (.check SEPARATOR)
          break
        else
          (.scan ESCAPE)
          (value += ($invoke @target 'getch'))
        )
      )
      ($invoke (get_native_class 'Gene::Types::Symbol') 'new' value)
    else
      UNPARSED
    )
  )

  (method parse_array _
    (if (.scan ARRAY_OPEN)
      (var result [])
      (var value)
      (loop
        (if (.eos?)
          (throw PrematureEndError "unexpected end of input")
        else_if (.scan ARRAY_CLOSE)
          break
        else_if (.skip IGNORE)
          # continue
        else_if ((value = (.parse_child)) != UNPARSED)
          (result .push value)
        else
          (throw ParseError "unexpected token at 'TODO'!")
        )
      )
      result
    else
      UNPARSED
    )
  )

  (method parse_gene _
    (if (.scan GENE_OPEN)
      (var type)
      (var properties {})
      (var data [])

      (var empty true)
      (var value)

      (loop
        (if (.eos?)
          (throw PrematureEndError "unexpected end of input")
        else_if (.skip IGNORE)
          noop
        else_if (.scan GENE_CLOSE)
          break
        else_if ((value = (.parse_property)) != UNPARSED)
          (properties .set (value .get 'name') (value .get 'value'))
        else_if ((value = (.parse_child)) != UNPARSED)
          (if empty
            (type = value)
          else
            (data .push value)
          )
          (empty = false)
        else
          (throw ParseError "unexpected token at 'TODO'!")
        )
      )

      (if empty
        noop
      else
        (var result (new Object data))
        (result .set '#type' type)
        (properties .each (fnx [name value] (result .set name value)))
        result
      )
    else
      UNPARSED
    )
  )

  (method parse_hash _
    (if (.scan HASH_OPEN)
      (var result {})
      (var value)

      (loop
        (if (.eos?)
          (throw PrematureEndError "unexpected end of input")
        else_if (.scan HASH_CLOSE)
          break
        else_if ((value = (.parse_property)) != UNPARSED)
          (result .set (value .get 'name') (value .get 'value'))
        else
          (throw ParseError "unexpected token at 'TODO'!")
        )
      )

      result
    else
      UNPARSED
    )
  )

  (method parse_child []
    (.skip IGNORE)

    (var result)

    (if (.eos?)
      (throw PrematureEndError "unexpected end of input")
    else_if ((result = (.parse_string))   != UNPARSED)
    else_if ((result = (.parse_float))    != UNPARSED)
    else_if ((result = (.parse_int))      != UNPARSED)
    else_if ((result = (.parse_keywords)) != UNPARSED)
    else_if ((result = (.parse_symbol))   != UNPARSED)
    else_if ((result = (.parse_array))    != UNPARSED)
    else_if ((result = (.parse_gene))     != UNPARSED)
    else_if ((result = (.parse_hash))     != UNPARSED)
    else
      (if (['"' "'"] .include? (.peek 1))
        (throw PrematureEndError "unexpected end of input")
      else
        (throw ParseError "unexpected token at 'TODO'!")
      )
    )

    result
  )

  (method parse_property _
    (if (.scan PROPERTY)
      (var s '')

      (loop
        (if (.eos?)
          break
        else_if (.check SEPARATOR)
          break
        else
          (.scan ESCAPE)
          (s += ($invoke @target 'getch'))
        )
      )

      (var matched (#/^[\^\!\+\-]?(.*)^?$/ .match s))
      (if matched
        (var name ($invoke matched '[]' 1))
        (var first (s .substr 0 1))
        (var value
          (if (['^' '+'] .include first)
            true
          else_if (['!' '-'] .include first)
            false
          else
            (.parse_child)
          )
        )

        (if (value == UNPARSED)
          (throw ParseError ("Attribute for " name " is not found."))
        else
          {^name name ^value value}
        )
      else
        (throw ParseError "Should never reach here")
      )
    else
      UNPARSED
    )
  )
)

(class ParseError
  ^^global
)

(class PrematureEndError extend ParseError
  ^^global
)

(fn gene_base [type properties data]
  (var o ($invoke (get_native_class 'Gene::Types::Base') 'new' type data))
  # TODO: copy properties
  o
)

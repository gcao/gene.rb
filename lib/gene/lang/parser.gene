(fn proxy name
  (method (do name) [args...]
    ^^inherit_scope    # to enable access to name
    ($invoke @target name args...)
  )
)

(class StringScanner
  ^^global

  (init source
    # create native StringScanner object
    (@target = ($invoke (get_native_class 'StringScanner') 'new' source))
  )

  # Use meta programming to define proxy methods
  (['eos?' 'skip' 'check' 'scan' 'peek'] .each (proxy .bind self))
)

# TODO: "this is a random_object" is required so it doesn't equal to other objects
(nsvar UNPARSED (new Object "this is a random_object"))

(nsvar SEPARATOR  #/[\s()\[\]{},;]/)
(nsvar SEP_OR_END (regexp "(?=" SEPARATOR "|$)"))
(nsvar IGNORE     #/\#($|[\n\r]|\s+[^\n\r]*($|[\n\r]))|[\s]/m)

(nsvar INTEGER    #/(-?0|-?[1-9]\d*)/)

# Keywords
(nsvar TRUE       (regexp 'true' SEP_OR_END))

(nsvar SYMBOL     #/([^"',\s\(\)\[\]\{\}][^,\s\(\)\[\]\{\}]*)/)
(nsvar STRING     #/"(([^"]|\\")*)"/)

(nsvar GENE_OPEN  #/\(/)
(nsvar GENE_CLOSE #/\)/)

(nsvar ARRAY_OPEN  #/\[/)
(nsvar ARRAY_CLOSE #/\]/)

(class Parser extend StringScanner
  ^^global

  (method parse _
    (var result UNPARSED)

    (var value)
    (var i 0)
    (loop
      # Prevent infinite loop
      (if (i < 100) (i += 1) else break)
      (if (.eos?) break)

      (if (.skip IGNORE)
        # continue
      else_if ((value = (.parse_int)) != UNPARSED)
        # (result = (.handle_top_level_results result value))
        (result = value)
      else_if ((value = (.parse_keywords)) != UNPARSED)
        (result = value)
      else_if ((value = (.parse_symbol)) != UNPARSED)
        (result = value)
      else_if ((value = (.parse_string)) != UNPARSED)
        (result = value)
      else_if ((value = (.parse_array)) != UNPARSED)
        (result = value)
      else_if ((value = (.parse_gene)) != UNPARSED)
        (result = value)
      )
    )

    (if (result == UNPARSED)
      ($invoke (get_native_class 'Gene::Types::Stream') 'new')
    else
      result
    )
  )

  (method parse_int _
    (if (.scan INTEGER)
      ($invoke ($invoke @target '[]' 1) 'to_i')
    else
      UNPARSED
    )
  )

  (method parse_keywords _
    (if (.scan TRUE)
      true
    else
      UNPARSED
    )
  )

  (method parse_string _
    (if (.scan STRING)
      ($invoke @target '[]' 1)
    else
      UNPARSED
    )
  )

  (method parse_symbol _
    (if (.check SYMBOL)
      (var value '')
      (loop
        (if (.eos?)
          break
        else_if (.check SEPARATOR)
          break
        else
          (value += ($invoke @target 'getch'))
        )
      )
      ($invoke (get_native_class 'Gene::Types::Symbol') 'new' value)
    else
      UNPARSED
    )
  )

  (method parse_array _
    (if (.scan ARRAY_OPEN)
      (var result [])
      (var value)
      (loop
        (if (.eos?)
          (throw PrematureEndError "unexpected end of input")
        else_if (.scan ARRAY_CLOSE)
          break
        else_if (.skip IGNORE)
          # continue
        else_if ((value = (.parse_child)) != UNPARSED)
          (result .push value)
        else
          (throw ParseError "unexpected token at 'TODO'!")
        )
      )
      result
    else
      UNPARSED
    )
  )

  (method parse_gene _
    (if (.scan GENE_OPEN)
      (var type)
      (var properties {})
      (var data [])

      (var empty true)
      (var value)

      (loop
        (if (.eos?)
          (throw PrematureEndError "unexpected end of input")
        else_if (.scan GENE_CLOSE)
          break
        else_if ((value = (.parse_child)) != UNPARSED)
          (if empty
            (type = value)
          else
            (data .push value)
          )
          (empty = false)
        else
          (throw ParseError "unexpected token at 'TODO'!")
        )
      )

      (if empty
        noop
      else
        (var result (new Object data))
        (result .set '#type' type)
        result
      )
    else
      UNPARSED
    )
  )

  (method parse_child []
    (.skip IGNORE)

    (var result)

    (if (.eos?)
      (throw PrematureEndError "unexpected end of input")
    else_if ((result = (.parse_string))   != UNPARSED)
    else_if ((result = (.parse_int))      != UNPARSED)
    else_if ((result = (.parse_keywords)) != UNPARSED)
    else_if ((result = (.parse_symbol))   != UNPARSED)
    else
      (if (['"' "'"] .include? (.peek 1))
        (throw PrematureEndError "unexpected end of input")
      else
        (throw ParseError "unexpected token at 'TODO'!")
      )
    )

    result
  )
)

(class ParseError
  ^^global
)

(class PrematureEndError extend ParseError
  ^^global
)

(fn gene_base [type properties data]
  (var o ($invoke (get_native_class 'Gene::Types::Base') 'new' type data))
  # TODO: copy properties
  o
)

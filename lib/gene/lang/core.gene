(class Object
  ^^global

  (init data
    (@#data = data)
  )

  (method size _
    ((.data) .size)
  )

  (method is_base_type _
    ($invoke self 'is_a?' (get_native_class 'Gene::Types::Base'))
  )

  (method type _
    (if (.is_base_type)
      ($invoke self 'type')
    else
      ($invoke self 'get' '#type')
    )
  )

  (method get prop_name
    (if (prop_name .is Int Range)
      ($invoke (.data) '[]' prop_name)
    else
      (if (.is_base_type)
        ($invoke self '[]' prop_name)
      else
        ((@ prop_name))
      )
    )
  )

  (method set [prop_name value]
    (if (.is_base_type)
      ($invoke self '[]=' prop_name value)
    else
      ((@ prop_name) = value)
    )
  )

  (method data _
    (if (.is_base_type)
      ($invoke self 'data')
    else
      ($invoke self 'data')
    )
  )

  (method first _
    (($invoke self 'data') .get 0)
  )

  (method call [name args...]
    ($invoke self name args...)
  )

  (method class _
    (if ($invoke self 'is_a?' (get_native_class 'Gene::Types::Stream'))
      Stream
    else_if ($invoke self 'is_a?' (get_native_class 'Array'))
      Array
    else_if ($invoke self 'is_a?' (get_native_class 'Hash'))
      Hash
    else_if ($invoke self 'is_a?' (get_native_class 'Gene::Types::Base'))
      Object
    else_if ($invoke self 'is_a?' (get_native_class 'String'))
      String
    else_if ($invoke self 'is_a?' (get_native_class 'Gene::Types::Symbol'))
      Symbol
    else_if ($invoke self 'is_a?' (get_native_class 'Fixnum'))
      Int
    else_if ([true false] .include self)
      Boolean
    else_if (self == null)
      Null
    else_if (self == undefined)
      Undefined
    else_if ($invoke self 'is_a?' (get_native_class 'Range'))
      Range
    else_if ($invoke self 'is_a?' (get_native_class 'Regexp'))
      Regexp
    else_if ($invoke self 'is_a?' (get_native_class 'Gene::Lang::Class'))
      Class
    else_if ($invoke self 'is_a?' (get_native_class 'Gene::Lang::Function'))
      Function
    else_if ($invoke self 'is_a?' (get_native_class 'Gene::Lang::Object'))
      (var cls ($invoke self 'class'))
      (if (($invoke cls 'name') == 'Gene::Lang::Object')
        Object
      else
        cls
      )
    else
      (println "(" ($invoke self 'inspect') " .class)")
      Object
    )
  )

  (method is klass...
    (var my_class (.class))
    (klass .any
      (fnx _klass (my_class .is_sub_class _klass))
    )
  )

  (method to_s _
    ($invoke self 'to_s')
  )
)

(class Context
  ^^global

  (method process_statements stmts
    # Gotcha: `return` is needed here in order to return any value as is to the caller.
    (return ($invoke self 'process_statements' stmts))
  )
)

(class Function
  ^^global

  (method bind target
    ($invoke self 'bind' target)
  )
)

(class Class
  ^^global

  (method parent_class _
    (@parent_class || Object)
  )

  # check whether I am klass or an ancestor of klass
  (method is_sub_class klass
    (if (self == klass)
      true
    else
      (if (self == Object)
        false
      else
        ((.parent_class) .is_sub_class klass)
      )
    )
  )
)

(class Aspect
  ^^global

  (method apply target
    ($invoke self 'apply' target)
  )
)

(class Throwable
  ^^global

  (prop message)
)

(class Exception extend Throwable
  ^^global
)

# Fatal errors
(class Error extend Throwable
  ^^global
)

(class Int
  ^^global
)

(class Null
  ^^global
)

# Wrapper class for native arrays
(class Array
  ^^global

  (method size _
    ($invoke self "size")
  )
  (method get i
    (if (i < (.size))
      ($invoke self '[]' i)
    )
  )
  (method include item
    (.any (fnx x (x == item)))
  )
  (method push item...
    ($invoke self 'push' item...)
  )
  (method any f
    (for (var i 0) (i < (.size)) (i += 1)
      (var item (.get i))
      (if (f item i)
        (return true)
      )
    )
    false
  )
  (method each f
    (for (var i 0) (i < (.size)) (i += 1)
      (var item (.get i))
      (f item i)
    )
  )
  (method map f
    (var result [])
    (for (var i 0) (i < (.size)) (i += 1)
      (var item (.get i))
      (result .push (f item i))
    )
    result
  )
  (method select f
    (var result [])
    (for (var i 0) (i < (.size)) (i += 1)
      (var item (.get i))
      (if (f item i)
        (result .push item)
      )
    )
    result
  )
  (method flatten _
    (var result [])
    (.each
      (fnx item
        (if (($invoke ($invoke item 'class') 'name') == 'Gene::Lang::Array')
          (var child_array (item .flatten))
          (child_array .each
            (fnx item ($invoke result '<<' item))
          )
        else
          ($invoke result '<<' item)
        )
      )
    )
    result
  )
  (method join seperator
    (var size (.size))
    (""
      (expand (.map (fnx [item i]
        ("" item (if (i < (size - 1)) seperator))
      )))
    )
  )
  (method to_s _
    ("[" (.join " ") "]")
  )
)

(class Stream extend Array
  ^^global
)

(class Hash
  ^^global

  (method size _
    ($invoke self "size")
  )

  (method get key
    ($invoke self '[]' key)
  )

  (method set [key value]
    ($invoke self '[]=' key value)
  )

  (method keys _
    ($invoke self 'keys')
  )

  (method map f
    ((.keys) .map
      ((fnx key
        (var value (.get key))
        (f key value)
      ) .bind self)
    )
  )

  (method each f
    ((.keys) .each
      ((fnx key
        (var value (.get key))
        (f key value)
      ) .bind self)
    )
  )
)

(class String
  ^^global

  (method type _ :String)
  (method data _ [self])
)

(class Boolean
  ^^global

  (method type _ :Boolean)
  (method data _ [self])
)

(class Symbol
  ^^global

  (method type _ :Symbol)
  (method data _ [self])
)

(class Regexp
  ^^global

  (method type _ :Regexp)
  (method data _ [self])
)

(class Range
  ^^global

  (method type _ :Range)
  (method data _
    [($invoke self 'begin') ($invoke self 'end')]
  )
)

(class Null
  ^^global

  (method type _ :null)
  (method data _ [])
)

(class Undefined
  ^^global

  (method type _ :undefined)
  (method data _ [])
)

(class BreakValue
  ^^global
)

(class ReturnValue
  ^^global
)

(class File
  ^^global

  (fn read file_name
    ($invoke (get_native_class 'File') 'read' file_name)
  )
)

(fn get_native_class name
  ^^global
  ($invoke
    ($invoke '' 'class') # get native String class. `const_get' can be called on any class
    'const_get' name
  )
)

(fn symbol name
  ^^global
  ($invoke (get_native_class 'Gene::Types::Symbol') 'new' name)
)

(fn regexp [^^ignore_case ^^multi_line ^^extended args...]
  ^^global
  (var str ('' args...))

  (var options 0)
  (if ignore_case (options |= (get_native_class 'Regexp::IGNORECASE')))
  (if multi_line  (options |= (get_native_class 'Regexp::MULTILINE' )))
  (if extended    (options |= (get_native_class 'Regexp::EXTENDED'  )))

  ($invoke (get_native_class 'Regexp') 'new' str options)
)

# (fn if_not [cond stmts...]
#   ^^global
#   (if ($caller_context .process_statements cond)
#     _
#   else
#     # Gotcha: `return` is needed here in order to return any value as is to the caller.
#     (return ($caller_context .process_statements stmts))
#   )
# )

(fn for [init cond update stmts...]
  ^^global
  ^!inherit_scope ^!eval_arguments
  # Do not inherit scope from where it's defined in: equivalent to ^!inherit_scope
  # Args are not evaluated before passed in: equivalent to ^!eval_arguments
  #
  # After evaluation, ReturnValue are returned as is, BreakValue are unwrapped and returned
  ($caller_context .process_statements init)
  (loop
    # check condition and break if false
    (var cond_result ((cond == _) || ($caller_context .process_statements cond)))
    (if_not cond_result
      return
    )

    # execuate statements
    (var result ($caller_context .process_statements stmts))
    # check result
    (if (($invoke ($invoke result 'class') 'name') == 'Gene::Lang::BreakValue')
      return
    )
    (if (($invoke ($invoke result 'class') 'name') == 'Gene::Lang::ReturnValue')
      (return result)
    )

    # update
    ($caller_context .process_statements update)
  )
)

(fn case [data rest...]
  ^^global
  ^!eval_arguments
  (var result)

  (data = ($context .process data))

  (var state) # undefined, :when, :condition, :matched, :else, :else_matched
  (for (var i 0) (i < (rest .size)) (i += 1)
    (var item (rest .get i))
    # TODO: see how we can implement a state machine easily here
    # undefined => when blocks => else => statements
    # when block: when => condition => (optional)then => statements
    # Should throw error on invalid transitions
  )
)

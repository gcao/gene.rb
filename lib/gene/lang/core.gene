(fn if-not [cond stmts...]
  ^^global
  (if ($caller-context .process_statements cond)
    _
  else
    (return ($caller-context .process_statements stmts))
  )
)

(fn for [init cond update stmts...]
  ^^global
  ^!inherit-scope ^!eval-arguments
  # Do not inherit scope from where it's defined in: equivalent to ^!inherit-scope
  # Args are not evaluated before passed in: equivalent to ^!eval-arguments
  #
  # After evaluation, ReturnValue are returned as is, BreakValue are unwrapped and returned
  ($caller-context .process_statements init)
  (loop
    # check condition and break if false
    (def cond-result ($caller-context .process_statements cond))
    (if-not cond-result
      return
    )

    # execuate statements
    (def result ($caller-context .process_statements stmts))
    # check result
    (if (($invoke ($invoke result 'class') 'name') == 'Gene::Lang::BreakValue')
      return
    )
    (if (($invoke ($invoke result 'class') 'name') == 'Gene::Lang::ReturnValue')
      (return result)
    )

    # update
    ($caller-context .process_statements update)
  )
)

(class Object ^^global
  (init _
  )

  (method get prop-name
    ((@ prop-name))
  )

  (method set [prop-name value]
    ((@ prop-name) = value)
  )

  (method call [name args...]
    ($invoke self name args...)
  )

  (method class _
    ($invoke self 'instance_variable_get' '@klass')
  )

  (method is klass
    ((.class) .is_sub_class klass)
  )
)

(class Context ^^global
  (method process_statements stmts
    ($invoke self 'process_statements' stmts)
  )
)

(class Class ^^global
  (method parent_class _
    (@parent_class || Object)
  )

  # check whether I am klass or an ancestor of klass
  (method is_sub_class klass
    (if (self == klass)
      true
    else
      (if (self == Object)
        false
      else
        ((.parent_class) .is_sub_class klass)
      )
    )
  )
)

(class Aspect ^^global
  (method apply target
    ($invoke self 'apply' target)
  )
)

(class Throwable ^^global
  (prop message)
)

(class Exception extend Throwable
  ^^global
)

# Fatal errors
(class Error extend Throwable
  ^^global
)

(class Int ^^global
)

# Wrapper class for native arrays
(class Array ^^global
  (method class _
    ($invoke $context "get_member" "Array")
  )
  (method size _
    ($invoke self "size")
  )
  (method get i
    (if (i < (.size))
      ($invoke self '[]' i)
    )
  )
  (method push item
    ($invoke self 'push' item)
  )
  (method any f
    (for (def i 0) (i < (.size)) (i += 1)
      (def item (.get i))
      (if (f item i)
        (return true)
      )
    )
    false
  )
  (method each f
    (for (def i 0) (i < (.size)) (i += 1)
      (def item (.get i))
      (f item i)
    )
  )
  (method select f
    (def result [])
    (for (def i 0) (i < (.size)) (i += 1)
      (def item (.get i))
      # TODO:
    )
    result
  )
  (method flatten _
    (def result [])
    (.each
      (fnx item
        (if (($invoke ($invoke item 'class') 'name') == 'Gene::Lang::Array')
          (def child-array (item .flatten))
          (child-array .each
            (fnx item ($invoke result '<<' item))
          )
        else
          ($invoke result '<<' item)
        )
      )
    )
    result
  )
)

(class Hash ^^global
  (method size _
    ($invoke self "size")
  )
)

(class String ^^global
  (method + args...
    ($invoke $self '<<' args)
  )
)

(class BreakValue ^^global
)

(class ReturnValue ^^global
)

(class File ^^global
)
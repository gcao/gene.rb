(fn gene2js data...
  ^^global
  (compile_stmts data)
)

(var BINARY_IDS (:: [= + - * / < <= > >= == != ++ -- instanceof]))

(fn compile data
  (if ((data .class) == Object)
    (if ((data .get 0) == :<-)
      (compile_invocation data)
    else_if (BINARY_IDS .include (data .get 0))
      (compile_binary data)
    else_if ((data .type) == :var)
      (compile_var data)
    else_if ((data .get 0) == :?)
      (compile_ternary data)
    else_if ((data .type) == :fn)
      (compile_fn data)
    else_if ((data .type) == :fnx)
      (compile_fnx data)
    else_if ((data .type) == :fnxx)
      (compile_fnxx data)
    else_if ((data .type) == :new)
      (compile_new data)
    else_if ((data .type) == :if)
      (compile_if data)
    else_if ((data .type) == :for)
      (if ((data .get 1) == :in)
        (compile_for_in data)
      else
        (compile_for data)
      )
    else_if ((data .type) == :while)
      (compile_while data)
    else_if ((data .type) == :try)
      (compile_try_catch data)
    else_if (((data .get 0) .is Symbol) && (((data .get 0) .to_s) =~ #/^\./))
      (compile_dot data)
    else_if ((data .get 0) == :~)
      (compile_group data)
    else_if ([:@] .include (data .get 0))
      (match (first _ second) data)
      ("" (compile first) "[" (compile second) "]")
    else_if ([:! :return :throw] .include (data .type))
      ("" (data .type) " " (compile (data .get 0)))
    else
      ("TODO: " data)
    )
  else_if (data .is Array)
    (compile_array data)
  else_if (data .is Int Symbol)
    data
  else_if (data .is String)
    ($invoke data 'inspect')
  else_if (data .is Boolean)
    ($invoke data 'inspect')
  else_if (data .is Null)
    "null"
  else_if (data .is Undefined)
    ""
  else_if (data .is Hash)
    (compile_hash data)
  else
    ("TODO: (compile " ($inspect self 'inspect') ")")
  )
)

(fn compile_stmts data
  ((data .map
    (fnx item
      (var s (compile item))
      (if (s == "")
        s
      else
        ('' s (if (s !~ #/}\s*\z/) ';') "\n")
      )
    )
  ) .join)
)

(fn compile_array data
  ("["
    (((data .select (fnx item (item != undefined)))
      .map (fnx item (compile item))
    ) .join ", ")
  "]")
)

(fn compile_hash data
  ("{\n"
    ((data .map
      (fnx [key value]
        ('"' key '": ' (compile value))
      )
    ) .join ",\n")
    "\n}"
  )
)

(fn compile_var data
  ("var " (data .get 0)
    (do
      (if ((data .size) > 1)
        (" = " (compile (data .get 1)))
      )
    )
  )
)

(fn compile_dot data
  (""
    (compile (data .type))
    (((data .data) .map (fnx item (compile item))) .join)
  )
)

(fn compile_group data
  (for (var i 0) (i < (data .size)) ( i += 2)
    (if ((data .get i) != :~) (throw ('"~" must be used between elements: ' data)))
  )

  ("("
    (compile (data .type))
    ((
      (data .data) .map
        (fnx item
          (if (item == :~) ", " else (compile item)
        )
      )
     ) .join)
    ")"
  )
)

(fn compile_invocation data
  (match (target _ args...) data)
  (var compiled_target (compile target))
  (""
    (if (compiled_target =~ #/}\s*$/)
      ("(" compiled_target ")")
    else
      compiled_target
    )
    "("
    (((args .select (fnx item (item != undefined))) .map (fnx arg (compile arg))) .join ", ")
    ")"
  )
)

(fn compile_fn data
  (match [name args stmts...] data)
  ("function " name
    "(" (args .join ", ") ") {\n"
      (compile_stmts stmts)
    "}"
  )
)

(fn compile_fnx data
  (match [args stmts...] data)
  ("function("
    (if (args .is Array)
      (args .join ", ")
    else
      args
    )
    ") {\n"
    (compile_stmts stmts)
    "}"
  )
)

(fn compile_fnxx data
  ("function() {\n"
    (compile_stmts (data .data))
    "}"
  )
)

(fn compile_new data
  (match [type args...] data)
  ("new " (compile type) "(" ((args .map (fnx arg (compile arg))) .join ", ") ")")
)

(fn compile_binary data
  (match (left op right) data)
  ("(" (compile left) " " op
    (if right
      (" " (compile right))
    )
  ")")
)

(fn compile_ternary data
  (match (cond _ first second) data)
  ("(" (compile cond) " ? " (compile first) " : " (compile second) ")")
)

(fn compile_if data
  (var if_cond (data .get 0))
  (var if_stmts [])
  (var else_ifs [])
  (var else_stmts [])

  (var state :if)
  (var cond)
  (var stmts [])
  (for (var i 1) (i < (data .size)) (i += 1)
    (var item (data .get i))

    (if (item == :else_if)
      (if (state == :else_if)
        (else_ifs .push [cond stmts])
      )
      (state = :else_if)
      (i += 1)
      (cond  = (data .get i))
      (stmts = [])

    else_if (item == :else)
      (if (state == :else_if)
        (else_ifs .push [cond stmts])
      )
      (state = :else)

    else
      (if (state == :if)
        (if_stmts .push item)
      else_if (state == :else_if)
        (stmts .push item)
      else_if (state == :else)
        (else_stmts .push item)
      )
    )
  )

  ("if (" (compile if_cond) ") {\n"
    (compile_stmts if_stmts)
    (if ((else_ifs .size) > 0)
      ((else_ifs .map
        (fnx pair
          (match [cond stmts] pair)
          ("} else if (" (compile cond) ") {\n"
            (compile_stmts stmts)
          )
        )
      ) .join)
    )
    (if ((else_stmts .size) > 0)
      ("} else {\n"
        (compile_stmts else_stmts)
      )
    )
  "}")
)

(fn compile_while data
  (match [cond stmts...] data)
  ("while (" (compile cond) ") {\n"
    (compile_stmts stmts)
  "}")
)

(fn compile_for data
  (match [init cond update stmts...] data)
  ("for ("
    (compile init) "; "
    (compile cond) "; "
    (compile update) ") {\n"
      (compile_stmts stmts)
    "}"
  )
)

(fn compile_for_in data
  (match [name _ list stmts...] data)
  ("for (var " name " in " (compile list) ") {\n"
    (compile_stmts stmts)
    "}"
  )
)

(fn compile_try_catch data
  (var try_stmts [])

  (var has_catch)
  (var error_var)
  (var catch_stmts [])

  (var has_finally)
  (var finally_stmts [])

  (var state :try)
  ((data .data) .each (fnx item
    (if (state == :try)
      (if (item == :catch)
        (state = :catch)
        (has_catch = true)
      else_if (item == :finally)
        (state = :finally)
        (has_finally = true)
      else
        (try_stmts .push item)
      )
    else_if (state == :catch)
      (error_var = item)
      (state = :catch_stmts)
    else_if (state == :catch_stmts)
      (if (item == :finally)
        (state = :finally)
        (has_finally = true)
      else
        (catch_stmts .push item)
      )
    else_if (state == :finally)
      (finally_stmts .push item)
    )
  ))

  # TODO: throw error if both has_catch and has_finally are false

  ("try {\n"
    (compile_stmts try_stmts)
    (if has_catch
      ("} catch (" error_var ") {\n" (compile_stmts catch_stmts))
    )
    (if has_finally
      ("} finally {\n" (compile_stmts finally_stmts))
    )
    "}"
  )
)
(fn compile code...
  ^^global

  # Empty code becomes [Stream] for some reason
  (if ((code .get 0) .is Stream)
    (code = (code .get 0))
  )
  (gene2js_
    ^^#render_args
    (var $root_context ($application . (create_root_context <-)))
    ((fnx $context
      (var $result)
      (%expand
        (code .map (fnx item
          (:$result = (%compile_ item))
        ))
      )
      (return $result)
    ) <- $root_context)
  )
)

(fn gene2js_ code...
  ^!eval_arguments

  (var result
    (gene2js
      code...
    )
  )
  result
)

(fn compile_ data
  (if (data .is Boolean Int)
    data
  else_if (data .is Symbol)
    (compile_symbol data)
  else_if (data .is Object)
    (if ((data .type) == :var)
      (compile_var data)
    else_if ((data .type) == :fn)
      (compile_fn data)
    else_if ((data .type) == :assert)
      (compile_assert data)
    else_if ([:==] .include (data .get 0))
      (compile_binary data)
    )
  )
)

(fn compile_symbol data
  (::
    (($context .get_member) <- (%= (data .to_s)))
  )
)

# TODO: Maybe we can create a function 'macro' that works like this
# (macro compile_var data
#   (($context . var) <-
#     (%= ((data .get 0) .to_s))
#     (%data .get 1)
#   )
# )
(fn compile_var data
  (::
    (($context . var) <-
      (%= ((data .get 0) .to_s))
      (%data .get 1)
    )
  )
)

(fn compile_assert data
  (match [cond mesg] data)
  (::
    ((Gene .assert) <- (%compile_ cond) %mesg)
  )
)

(fn compile_binary data
  (match (left op right) data)
  (::
    ((%compile_ left) %op (%compile_ right))
  )
)

(fn compile_fn data
  (match [name args stmts...] data)
  (::
    (($context .fn) <-
      (%= (name .to_s))
      (%args .map (fnx arg (arg .to_s)))
      (fnx $context
        (var $result)
        (return $result)
      )
    )
  )
)